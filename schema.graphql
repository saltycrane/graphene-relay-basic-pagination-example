schema {
  query: Query
}

type FishNode implements Node {
  id: ID!
  description: String!
  iconUrl: String!
  name: String!
  price: Int!
}

type FishNodeConnection {
  pageInfo: PageInfo!
  edges: [FishNodeEdge]!
  pageCursors: PageCursors
}

type FishNodeEdge {
  node: FishNode
  cursor: String!
}

interface Node {
  id: ID!
}

type PageCursor {
  cursor: String
  isCurrent: Boolean
  page: Int
}

type PageCursors {
  around: [PageCursor]
  first: PageCursor
  last: PageCursor
  previous: PageCursor
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  fish(id: ID!): FishNode
  allFishes(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Contains: String, price_Lt: Int, price_Gt: Int, orderBy: String): FishNodeConnection
}
